import { NextRequest, NextResponse } from "next/server"
import { db } from "@/lib/db"
import { getSubdomainForAPI } from "@/lib/utils"
import jwt from "jsonwebtoken"
import { v4 as uuidv4 } from "uuid"

const JWT_SECRET = process.env.JWT_SECRET || "your-secret-key"

export async function POST(request: NextRequest) {
  try {
    const subdomain = getSubdomainForAPI(request)
    
    if (!subdomain) {
      return NextResponse.json({ error: "Subdomain required" }, { status: 400 })
    }

    const body = await request.json()
    const { sessionId } = body

    if (!sessionId) {
      return NextResponse.json({ error: "Session ID is required" }, { status: 400 })
    }

    // Get the agency
    const agency = await db.agency.findUnique({
      where: { subdomain }
    })

    if (!agency) {
      return NextResponse.json({ error: "Agency not found" }, { status: 404 })
    }

    // Find the student by session ID
    const student = await db.student.findFirst({
      where: {
        currentSessionId: sessionId,
        agencyId: agency.id
      }
    })

    if (!student) {
      return NextResponse.json({ error: "Session not found" }, { status: 404 })
    }

    // Check if account is locked
    if (student.accountLocked && student.lockedUntil && new Date() < student.lockedUntil) {
      return NextResponse.json({ 
        error: "Account temporarily locked. Please try again later." 
      }, { status: 403 })
    }

    // Generate a new 6-digit code
    const newCode = Math.floor(100000 + Math.random() * 900000).toString()

    // Send the code based on the 2FA method
    if (student.twoFactorMethod === "EMAIL") {
      // In production, you would send an email with the code
      console.log(`Sending 2FA code ${newCode} to email: ${student.email}`)
      
      // For demo purposes, we'll just log it
      // In production, use a service like SendGrid, AWS SES, etc.
      
    } else if (student.twoFactorMethod === "SMS") {
      // In production, you would send an SMS with the code
      console.log(`Sending 2FA code ${newCode} to phone: ${student.phone}`)
      
      // For demo purposes, we'll just log it
      // In production, use a service like Twilio, AWS SNS, etc.
      
    } else if (student.twoFactorMethod === "AUTHENTICATOR") {
      // For authenticator apps, the code is generated by the app itself
      // So we don't need to send anything, but we can still log the attempt
      console.log(`Authenticator app 2FA requested for: ${student.email}`)
    }

    // Store the new code (in production, you would store it securely with expiration)
    // For demo purposes, we'll just acknowledge the resend
    
    // Log the resend attempt
    await db.student.update({
      where: { id: student.id },
      data: {
        updatedAt: new Date()
      }
    })

    return NextResponse.json({
      success: true,
      message: "Verification code resent successfully",
      method: student.twoFactorMethod,
      // For demo purposes only - in production, never return the actual code
      demoCode: process.env.NODE_ENV === 'development' ? newCode : undefined
    })

  } catch (error) {
    console.error("Error in 2FA resend API:", error)
    return NextResponse.json({ 
      error: "Internal server error",
      details: error.message 
    }, { status: 500 })
  }
}